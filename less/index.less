@color: green;
@bgColor: red;
@width: 100px;
@height: 150px;

#wrap {
  color: @color;
  background-color: @bgColor;
  width: @width;
  height: @height;
}

.border(@width, @style, @color) {
  border: @width @style @color;
}
.box {
  .border(1px, solid, green);
}

// 嵌套
#header {
  color: black;
  background-color: aqua;
  height: 100px;
  width: 100px;
  .navigation {
    font-size: 12px;
  }
}

// 嵌套还可以将：伪类选择器和混合一起使用
#header {
  color: black;
  background-color: aqua;
  height: 100px;
  width: 100px;
  .navigation {
    font-size: 12px;
  };
  &:hover {
    color: red;
    background-color: yellow;
  }
}

// @规则嵌套和冒泡
// 可以将@规则(如@font-face,@media等)与选择器以相同的方式进行嵌套
.component {
  width: 300px;
  @media (min-width: 768px) {
    width: 600px;
    @media (min-resolution: 192dpi) {
      background-image: url(/img/retina2x.png);
    }
  }
}

// 运算
// 可以对任何数字，颜色或者变量进行运算
@conversion-1: 5cm + 10mm; // 结果时6cm
@conversion-2: 2 - 3cm - 5cm; // 结果时-1.5cm

@base: 5%;
@filler: @base * 2; // 结果是10%

@color: #224400 + #113300; // 结果是#337700

// calc()特例
// 为了与css保持兼容，calc()并不能对数学表达式进行起算，但如果嵌套才函数中，会计算
#header {
  width: calc(100% - 10px);
}


// 转义
// 转义字符可以用于在字符串中插入特殊字符
// 任何~"anythins" 或 ~'anything' 都将按照原样输出
@min7: ~"screen and (min-width: 768px)";
@max12: ~"screen and (max-width: 1200px)";
.element {
  @media @min7 {
    font-size: 1.2rem;
  }
}

// 继承
// 继承是less中一个强大的功能，它允许一个选择器中的样式继承到另一个选择器中
.class1 {
  color: green;
  .class2 {
    font-size: 18px;
  }
}

// 导入
// 导入.less文件，这样此文件中的所有变量就可以全部使用了
// @import "library"; // 导入整个文件
// @import "typo.css"; // 导入css文件
// @import "typo.css" screen; // 导入css文件，并指定媒体类型

// 作用域
// 变量和混合的定义不会相互冲突
@var: red;
#page {
  @var: black;
  .box {
    color: @var; // 此处的@var是局部变量
  }
}

// 命名空间和访问符
#bundle() {
  .button {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &:hover {
      background-color: white;
    }
  }
  .tab {
    &:hover {
      background-color: #ccc;
    }
  }
}

#header a {
  color: orange;
  #bundle.button();
}

// 映射
#colors() {
  primary: blue;
  secondary: green;
}
.button {
  color: #colors[primary];
}